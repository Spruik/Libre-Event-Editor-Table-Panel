{"version":3,"sources":["../src/influxAPI.js"],"names":["isOK","val","undefined","utils","insert","measurement","current","data","line","writeLine","url","influxHost","result","sure","post","split","newTimeStamp","currentEvent","form","oldTimeStamp","min","maxTimeStamp","max","lineForLeft","writeSplitLine","record","lineForRight","influxDBName","leftResult","ok","rightResult","cur","timestamp","addSlash","site","area","stopped","idle","execute","held","complete","status","machinestate","actual_rate","rid_1","comment","equipment","reasons","length","join","category","isLeftLine","meta","isSplittingLeft","parentreason","reason","substring"],"mappings":"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","file":"influxAPI.js","sourcesContent":["import * as utils from './utils'\n\nexport const insert = async (measurement, current, data) => {\n  const line = writeLine(measurement, current, data)\n  const url = `${utils.influxHost}write?db=smart_factory`\n  const result = await utils.sure(utils.post(url, line))\n  return result\n}\n\nexport const split = async (newTimeStamp, currentEvent, form, measurement) => {\n  const oldTimeStamp = form.min * 1000000\n  const maxTimeStamp = form.max * 1000000\n\n  const lineForLeft = writeSplitLine(oldTimeStamp, newTimeStamp, maxTimeStamp, currentEvent.record, form, measurement, true)\n  const lineForRight = writeSplitLine(oldTimeStamp, newTimeStamp, maxTimeStamp, currentEvent.record, form, measurement, false)\n\n  const url = `${utils.influxHost}write?db=${utils.influxDBName}`\n\n  const leftResult = await utils.sure(utils.post(url, lineForLeft)) \n  if (!leftResult.ok) { return leftResult }\n  const rightResult = await utils.sure(utils.post(url, lineForRight))\n  if (!rightResult.ok) { return rightResult }\n\n  return rightResult\n}\n\nconst writeLine = (measurement, current, data) => {\n  const cur = current.record\n  const timestamp = current.timestamp\n\n  let line = `${measurement},Site=${utils.addSlash(cur.site)},Area=${utils.addSlash(cur.area)},Line=${utils.addSlash(cur.line)} `\n\n  if(isOK(cur.stopped)){ line += `stopped=${cur.stopped},` }\n  if(isOK(cur.idle)){ line += `idle=${cur.idle},` }\n  if(isOK(cur.execute)){ line += `execute=${cur.execute},` }\n  if(isOK(cur.held)){ line += `held=${cur.held},` }\n  if(isOK(cur.complete)){ line += `complete=${cur.complete},` }\n\n  if(isOK(cur.status)){ line += `status=\"${cur.status}\",` }\n  if(isOK(cur.machinestate)){ line += `MachineState=\"${cur.machinestate}\",` }\n\n  if(isOK(cur.actual_rate)){ line += `actual_rate=${cur.actual_rate},` }\n\n  if(isOK(cur.rid_1)){ line += `rid_1=\"${cur.rid_1}\",` }\n\n  line += isOK(data.comment) ? `comment=\"${data.comment}\",` : `comment=\"\",` \n  line += isOK(data.equipment) ? `equipment=\"${data.equipment}\",` : `equipment=\"\",` \n\n  if(data.reasons.length !== 0){ \n    line += `parentReason=\"${data.reasons[0]}\",` \n    line += `reason=\"${data.reasons.join(' | ')}\",` \n  }\n  line += `category=\"${data.category}\" `\n  line += timestamp\n\n  return line\n}\n\nconst writeSplitLine = (oldTimeStamp, newTimeStamp, maxTimeStamp, cur, form, measurement, isLeftLine) => {\n  let line = `${measurement},Site=${utils.addSlash(cur.site)},Area=${utils.addSlash(cur.area)},Line=${utils.addSlash(cur.line)} `\n  if(isOK(cur.stopped)){ line += `stopped=${cur.stopped},` }\n  if(isOK(cur.idle)){ line += `idle=${cur.idle},` }\n  if(isOK(cur.execute)){ line += `execute=${cur.execute},` }\n  if(isOK(cur.held)){ line += `held=${cur.held},` }\n  if(isOK(cur.complete)){ line += `complete=${cur.complete},` }\n  if(isOK(cur.status)){ line += `status=\"${cur.status}\",` }\n  if(isOK(cur.machinestate)){ line += `MachineState=\"${cur.machinestate}\",` }\n  if(isOK(cur.actual_rate)){ line += `actual_rate=${cur.actual_rate},` }\n  if(isOK(cur.rid_1)){ line += `rid_1=\"${cur.rid_1}\",` }\n  \n  if (isLeftLine) {\n    // writing left line\n    if (form.meta.isSplittingLeft) {\n      // is splitting left\n      line += isOK(form.comment) ? `comment=\"${form.comment}\",` : `comment=\"\",` \n      line += isOK(form.equipment) ? `equipment=\"${form.equipment}\",` : `equipment=\"\",` \n      if(isOK(form.category)){ line += `category=\"${form.category}\",` }\n      if(isOK(form.reasons)){ \n        line += `parentReason=\"${form.reasons.split(' | ')[0]}\",` \n        line += `reason=\"${form.reasons}\",` \n      }\n    }else {\n      // is splitting right\n      if(isOK(cur.comment)){ line += `comment=\"${cur.comment}\",` }\n      if(isOK(cur.equipment)){ line += `equipment=\"${cur.equipment}\",` }\n      if(isOK(cur.category)){ line += `category=\"${cur.category}\",` }\n      if(isOK(cur.parentreason)){ line += `parentReason=\"${cur.parentreason}\",` }\n      if(isOK(cur.reason)){ line += `reason=\"${cur.reason}\",` }\n    }\n\n    if(line[line.length-1] === ',') {\n      line = line.substring(0, line.length - 1)\n    }\n    line += ' ' + oldTimeStamp\n\n  } else {\n    // write right line\n    if (!form.meta.isSplittingLeft) {\n      // is splitting right\n      line += isOK(form.comment) ? `comment=\"${form.comment}\",` : `comment=\"\",` \n      line += isOK(form.equipment) ? `equipment=\"${form.equipment}\",` : `equipment=\"\",` \n      if(isOK(form.category)){ line += `category=\"${form.category}\",` }\n      if(isOK(form.reasons)){ \n        line += `parentReason=\"${form.reasons.split(' | ')[0]}\",` \n        line += `reason=\"${form.reasons}\",` \n      }\n    }\n\n    if(line[line.length-1] === ',') {\n      line = line.substring(0, line.length - 1)\n    }\n    line += ' ' + newTimeStamp\n  }\n\n  return line\n}\n\nfunction isOK(val) {\n  return val !== null && val !== undefined && val !== '' && val !== 'No Category' && val !== 'No Reasons'\n}"]}