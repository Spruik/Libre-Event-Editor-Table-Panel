{"version":3,"sources":["../src/influxAPI.js"],"names":["isOK","val","undefined","getDuration","diff","difference","milSecs","parseInt","daysDiff","Math","floor","hrsDiff","minsDiff","slice","secsDiff","timeToAdd","utils","insert","measurement","current","data","line","writeLine","url","influxHost","result","sure","post","split","newTimeStamp","currentEvent","form","oldTimeStamp","min","maxTimeStamp","max","lineForLeft","writeSplitLine","record","lineForRight","influxDBName","leftResult","ok","rightResult","cur","timestamp","addSlash","site","area","stopped","idle","execute","held","complete","status","machinestate","actual_rate","rid_1","duration","comment","equipment","reasons","length","join","category","isLeftLine","meta","isSplittingLeft","parentreason","reason","dur"],"mappings":"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","file":"influxAPI.js","sourcesContent":["import * as utils from './utils'\n\nexport const insert = async (measurement, current, data) => {\n  const line = writeLine(measurement, current, data)\n  const url = `${utils.influxHost}write?db=smart_factory`\n  const result = await utils.sure(utils.post(url, line))\n  return result\n}\n\nexport const split = async (newTimeStamp, currentEvent, form, measurement) => {\n  const oldTimeStamp = form.min * 1000000\n  const maxTimeStamp = form.max * 1000000\n\n  const lineForLeft = writeSplitLine(oldTimeStamp, newTimeStamp, maxTimeStamp, currentEvent.record, form, measurement, true)\n  const lineForRight = writeSplitLine(oldTimeStamp, newTimeStamp, maxTimeStamp, currentEvent.record, form, measurement, false)\n\n  const url = `${utils.influxHost}write?db=${utils.influxDBName}`\n\n  const leftResult = await utils.sure(utils.post(url, lineForLeft)) \n  if (!leftResult.ok) { return leftResult }\n  const rightResult = await utils.sure(utils.post(url, lineForRight))\n  if (!rightResult.ok) { return rightResult }\n\n  return rightResult\n}\n\nconst writeLine = (measurement, current, data) => {\n  const cur = current.record\n  const timestamp = current.timestamp\n\n  let line = `${measurement},Site=${utils.addSlash(cur.site)},Area=${utils.addSlash(cur.area)},Line=${utils.addSlash(cur.line)} `\n\n  if(isOK(cur.stopped)){ line += `stopped=${cur.stopped},` }\n  if(isOK(cur.idle)){ line += `idle=${cur.idle},` }\n  if(isOK(cur.execute)){ line += `execute=${cur.execute},` }\n  if(isOK(cur.held)){ line += `held=${cur.held},` }\n  if(isOK(cur.complete)){ line += `complete=${cur.complete},` }\n\n  if(isOK(cur.status)){ line += `status=\"${cur.status}\",` }\n  if(isOK(cur.machinestate)){ line += `MachineState=\"${cur.machinestate}\",` }\n\n  if(isOK(cur.actual_rate)){ line += `actual_rate=${cur.actual_rate},` }\n\n  if(isOK(cur.rid_1)){ line += `rid_1=\"${cur.rid_1}\",` }\n\n  if(isOK(cur.duration)){ line += `duration=\"${cur.duration}\",` }\n\n\n  line += isOK(data.comment) ? `comment=\"${data.comment}\",` : `comment=\"\",` \n  line += isOK(data.equipment) ? `equipment=\"${data.equipment}\",` : `equipment=\"\",` \n\n  if(data.reasons.length !== 0){ \n    line += `parentReason=\"${data.reasons[0]}\",` \n    line += `reason=\"${data.reasons.join(' | ')}\",` \n  }\n  line += `category=\"${data.category}\" `\n  line += timestamp\n\n  return line\n}\n\nconst writeSplitLine = (oldTimeStamp, newTimeStamp, maxTimeStamp, cur, form, measurement, isLeftLine) => {\n  let line = `${measurement},Site=${utils.addSlash(cur.site)},Area=${utils.addSlash(cur.area)},Line=${utils.addSlash(cur.line)} `\n  if(isOK(cur.stopped)){ line += `stopped=${cur.stopped},` }\n  if(isOK(cur.idle)){ line += `idle=${cur.idle},` }\n  if(isOK(cur.execute)){ line += `execute=${cur.execute},` }\n  if(isOK(cur.held)){ line += `held=${cur.held},` }\n  if(isOK(cur.complete)){ line += `complete=${cur.complete},` }\n  if(isOK(cur.status)){ line += `status=\"${cur.status}\",` }\n  if(isOK(cur.machinestate)){ line += `MachineState=\"${cur.machinestate}\",` }\n  if(isOK(cur.actual_rate)){ line += `actual_rate=${cur.actual_rate},` }\n  if(isOK(cur.rid_1)){ line += `rid_1=\"${cur.rid_1}\",` }\n  \n  if (isLeftLine) {\n    // writing left line\n    if (form.meta.isSplittingLeft) {\n      // is splitting left\n      line += isOK(form.comment) ? `comment=\"${form.comment}\",` : `comment=\"\",` \n      line += isOK(form.equipment) ? `equipment=\"${form.equipment}\",` : `equipment=\"\",` \n      if(isOK(form.category)){ line += `category=\"${form.category}\",` }\n      if(isOK(form.reasons)){ \n        line += `parentReason=\"${form.reasons.split(' | ')[0]}\",` \n        line += `reason=\"${form.reasons}\",` \n      }\n    }else {\n      // is splitting right\n      if(isOK(cur.comment)){ line += `comment=\"${cur.comment}\",` }\n      if(isOK(cur.equipment)){ line += `equipment=\"${cur.equipment}\",` }\n      if(isOK(cur.category)){ line += `category=\"${cur.category}\",` }\n      if(isOK(cur.parentreason)){ line += `parentReason=\"${cur.parentreason}\",` }\n      if(isOK(cur.reason)){ line += `reason=\"${cur.reason}\",` }\n    }\n\n    const diff = newTimeStamp - oldTimeStamp \n    const dur = getDuration(diff)\n    line += `durationInt=${diff/1000000},`\n    line += `duration=\"${dur}\" ` // it's the last field in the query, leave a space for the timestamp\n    line += oldTimeStamp\n\n  } else {\n    // write right line\n    if (!form.meta.isSplittingLeft) {\n      // is splitting right\n      line += isOK(form.comment) ? `comment=\"${form.comment}\",` : `comment=\"\",` \n      line += isOK(form.equipment) ? `equipment=\"${form.equipment}\",` : `equipment=\"\",` \n      if(isOK(form.category)){ line += `category=\"${form.category}\",` }\n      if(isOK(form.reasons)){ \n        line += `parentReason=\"${form.reasons.split(' | ')[0]}\",` \n        line += `reason=\"${form.reasons}\",` \n      }\n    }\n\n    const diff = maxTimeStamp - newTimeStamp \n    const dur = getDuration(diff)\n    line += `durationInt=${diff/1000000},`\n    line += `duration=\"${dur}\" ` // it's the last field in the query, leave a space for the timestamp\n    line += newTimeStamp\n  }\n\n  return line\n}\n\nfunction isOK(val) {\n  return val !== null && val !== undefined && val !== '' && val !== 'No Category' && val !== 'No Reasons'\n}\n\nfunction getDuration(diff){\n\n  let difference = diff/1000000\n  const milSecs = parseInt(difference%1000)\n\n  const daysDiff = Math.floor(difference/1000/60/60/24)\n  difference -= daysDiff*1000*60*60*24\n\n  let hrsDiff = Math.floor(difference/1000/60/60)\n  difference -= hrsDiff*1000*60*60\n\n  const minsDiff = ('0' + (Math.floor(difference/1000/60))).slice(-2)\n  difference -= minsDiff*1000*60\n\n  const secsDiff = ('0' + (Math.floor(difference/1000))).slice(-2)\n  difference -= minsDiff*1000\n\n  let timeToAdd = daysDiff * 24\n  hrsDiff = hrsDiff + timeToAdd\n  hrsDiff = (hrsDiff < 10) ? '0' + hrsDiff : hrsDiff\n\n  return hrsDiff + ':' + minsDiff + ':' + secsDiff + '.' + milSecs\n}"]}