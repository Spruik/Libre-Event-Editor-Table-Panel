{"version":3,"sources":["../src/camundaAPI.js"],"names":["utils","post","url","param","json","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","handleResponse","setRequestHeader","onerror","e","send","readyState","status","responseText","postMsg","data","line","site","area","toSend","messageName","processVariables","_requestContext","value","JSON","stringify","type","_currentLine","sure","camundaRestApi"],"mappings":";;;;;;;;AAAYA,W;;;AAENC,U,GAAO,SAAPA,IAAO,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAsB;AACjC,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,cAAIE,IAAJ,CAAS,MAAT,EAAiBR,MAAMC,KAAvB;AACAK,cAAIG,kBAAJ,GAAyBC,cAAzB;AACAJ,cAAIK,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAL,cAAIM,OAAJ,GAAc;AAAA,mBAAKP,OAAOQ,CAAP,CAAL;AAAA,WAAd;AACAP,cAAIQ,IAAJ,CAASZ,IAAT;;AAEA,mBAASQ,cAAT,GAA2B;AACzB,gBAAIJ,IAAIS,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,kBAAIT,IAAIU,MAAJ,GAAa,GAAb,IAAoBV,IAAIU,MAAJ,IAAc,GAAtC,EAA2C;AACzCZ,wBAAQE,IAAIW,YAAZ;AACD,eAFD,MAEO;AACLZ,uBAAOC,IAAIW,YAAX;AACD;AACF;AACF;AACF,SAjBM,CAAP;AAkBD,O;;yBAEYC,O,GAAU,eAAVA,OAAU,CAAMC,IAAN,EAAc;;AAEnC,YAAMC,OAAOD,KAAKE,IAAL,GAAY,KAAZ,GAAoBF,KAAKG,IAAzB,GAAgC,KAAhC,GAAwCH,KAAKC,IAA1D;AACA,YAAMG,SAAS;AACbC,uBAAc,oBADD;AAEbC,4BAAmB;AACjBC,6BAAkB,EAACC,OAAOC,KAAKC,SAAL,CAAeV,IAAf,CAAR,EAA8BW,MAAM,QAApC,EADD;AAEjBC,0BAAe,EAACJ,OAAOP,IAAR,EAAcU,MAAM,QAApB;AAFE;AAFN,SAAf;;AAQA,eAAO,MAAMhC,MAAMkC,IAAN,CAAWjC,KAAKD,MAAMmC,cAAX,EAA2B,SAA3B,EAAsCL,KAAKC,SAAL,CAAeN,MAAf,CAAtC,CAAX,CAAb;AACD,O","file":"camundaAPI.js","sourcesContent":["import * as utils from './utils'\n\nconst post = (url, param, json) => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.open('POST', url + param)\n    xhr.onreadystatechange = handleResponse\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.onerror = e => reject(e)\n    xhr.send(json)\n\n    function handleResponse () {\n      if (xhr.readyState === 4) {\n        if (xhr.status < 300 && xhr.status >= 200) {\n          resolve(xhr.responseText)\n        } else {\n          reject(xhr.responseText)\n        }\n      }\n    }\n  })\n}\n\nexport const postMsg = async data => {\n  \n  const line = data.site + ' | ' + data.area + ' | ' + data.line\n  const toSend = {\n    messageName : \"maintenanceRequest\",\n    processVariables : {\n      _requestContext : {value: JSON.stringify(data), type: 'String'},\n      _currentLine : {value: line, type: 'String'}\n    }\n  }\n\n  return await utils.sure(post(utils.camundaRestApi, 'message', JSON.stringify(toSend)))\n}"]}