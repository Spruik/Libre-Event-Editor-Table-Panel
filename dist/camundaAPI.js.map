{"version":3,"sources":["../src/camundaAPI.js"],"names":["utils","post","url","param","json","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","handleResponse","setRequestHeader","onerror","e","send","readyState","status","responseText","postMsg","data","line","site","area","toSend","messageName","processVariables","_requestContext","value","JSON","stringify","type","_currentLine","sure","camundaRestApi"],"mappings":";;;;;;;;AAAYA,Q;;;AAENC,O,GAAO,SAAPA,IAAO,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAsB;AAClC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,SAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,SAAIE,IAAJ,CAAS,MAAT,EAAiBR,MAAMC,KAAvB;AACAK,SAAIG,kBAAJ,GAAyBC,cAAzB;AACAJ,SAAIK,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAL,SAAIM,OAAJ,GAAc,UAACC,CAAD;AAAA,aAAOR,OAAOQ,CAAP,CAAP;AAAA,MAAd;AACAP,SAAIQ,IAAJ,CAASZ,IAAT;;AAEA,cAASQ,cAAT,GAA0B;AACzB,UAAIJ,IAAIS,UAAJ,KAAmB,CAAvB,EAA0B;AACzB,WAAIT,IAAIU,MAAJ,GAAa,GAAb,IAAoBV,IAAIU,MAAJ,IAAc,GAAtC,EAA2C;AAC1CZ,gBAAQE,IAAIW,YAAZ;AACA,QAFD,MAEO;AACNZ,eAAOC,IAAIW,YAAX;AACA;AACD;AACD;AACD,KAjBM,CAAP;AAkBA,I;;sBAEYC,O,GAAU,eAAVA,OAAU,CAAOC,IAAP,EAAgB;AACtC,QAAMC,OAAOD,KAAKE,IAAL,GAAY,KAAZ,GAAoBF,KAAKG,IAAzB,GAAgC,KAAhC,GAAwCH,KAAKC,IAA1D;AACA,QAAMG,SAAS;AACdC,kBAAa,oBADC;AAEdC,uBAAkB;AACjBC,uBAAiB,EAAEC,OAAOC,KAAKC,SAAL,CAAeV,IAAf,CAAT,EAA+BW,MAAM,QAArC,EADA;AAEjBC,oBAAc,EAAEJ,OAAOP,IAAT,EAAeU,MAAM,QAArB;AAFG;AAFJ,KAAf;;AAQA,WAAO,MAAMhC,MAAMkC,IAAN,CAAWjC,KAAKD,MAAMmC,cAAX,EAA2B,SAA3B,EAAsCL,KAAKC,SAAL,CAAeN,MAAf,CAAtC,CAAX,CAAb;AACA,I","file":"camundaAPI.js","sourcesContent":["import * as utils from './utils';\n\nconst post = (url, param, json) => {\n\treturn new Promise((resolve, reject) => {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('POST', url + param);\n\t\txhr.onreadystatechange = handleResponse;\n\t\txhr.setRequestHeader('Content-Type', 'application/json');\n\t\txhr.onerror = (e) => reject(e);\n\t\txhr.send(json);\n\n\t\tfunction handleResponse() {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tif (xhr.status < 300 && xhr.status >= 200) {\n\t\t\t\t\tresolve(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\treject(xhr.responseText);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\nexport const postMsg = async (data) => {\n\tconst line = data.site + ' | ' + data.area + ' | ' + data.line;\n\tconst toSend = {\n\t\tmessageName: 'maintenanceRequest',\n\t\tprocessVariables: {\n\t\t\t_requestContext: { value: JSON.stringify(data), type: 'String' },\n\t\t\t_currentLine: { value: line, type: 'String' }\n\t\t}\n\t};\n\n\treturn await utils.sure(post(utils.camundaRestApi, 'message', JSON.stringify(toSend)));\n};\n"]}