{"version":3,"sources":["../src/utils.js"],"names":["appEvents","hostname","window","location","http","postgRestHost","influxHost","tasklistHostName","camundaHost","camundaRestApi","get","Promise","resolve","reject","xhr","XMLHttpRequest","open","url","onreadystatechange","handleResponse","onerror","e","send","readyState","status","res","JSON","parse","responseText","statusText","post","line","addSlash","target","key","split","join","alert","type","title","msg","emit"],"mappings":";;;;;;;;AAASA,e,gBAAAA,S;;;AAEHC,c,GAAWC,OAAOC,QAAP,CAAgBF,Q;AAC3BG,U,GAAO,S;;+BACAC,a,GAAgBD,OAAOH,QAAP,GAAkB,Q;;;;4BAClCK,U,GAAaF,OAAOH,QAAP,GAAkB,Q;;;;AAExCM,sB,GAAmBN,Q;;AACvB,UAAIM,qBAAqB,WAAzB,EAAsC;AACpCA,2BAAmB,WAAnB;AACD;;6BACYC,W,GAAcJ,OAAOG,gBAAP,GAA0B,4B;;;;gCACxCE,c,GAAiBL,OAAOH,QAAP,GAAkB,oB;;;;qBAEnCS,G,GAAM,SAANA,GAAM,MAAO;AACxB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,cAAIE,IAAJ,CAAS,KAAT,EAAgBC,GAAhB;AACAH,cAAII,kBAAJ,GAAyBC,cAAzB;AACAL,cAAIM,OAAJ,GAAc;AAAA,mBAAKP,OAAOQ,CAAP,CAAL;AAAA,WAAd;AACAP,cAAIQ,IAAJ;;AAEA,mBAASH,cAAT,GAA2B;AACzB,gBAAIL,IAAIS,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,kBAAIT,IAAIU,MAAJ,KAAe,GAAnB,EAAwB;AACtB,oBAAIC,MAAMC,KAAKC,KAAL,CAAWb,IAAIc,YAAf,CAAV;AACAhB,wBAAQa,GAAR;AACD,eAHD,MAGO;AACLZ,uBAAO,KAAKgB,UAAZ;AACD;AACF;AACF;AACF,SAjBM,CAAP;AAkBD,O;;;;sBAEYC,I,GAAO,SAAPA,IAAO,CAACb,GAAD,EAAMc,IAAN,EAAe;AACjC,eAAO,IAAIpB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,cAAIE,IAAJ,CAAS,MAAT,EAAiBC,GAAjB;AACAH,cAAII,kBAAJ,GAAyBC,cAAzB;AACAL,cAAIM,OAAJ,GAAc;AAAA,mBAAKP,OAAOQ,CAAP,CAAL;AAAA,WAAd;AACAP,cAAIQ,IAAJ,CAASS,IAAT;;AAEA,mBAASZ,cAAT,GAA2B;AACzB,gBAAIL,IAAIS,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,kBAAIT,IAAIU,MAAJ,KAAe,GAAnB,EAAwB;AACtB;AACA,oBAAIC,MAAMC,KAAKC,KAAL,CAAWb,IAAIc,YAAf,CAAV;AACAhB,wBAAQa,GAAR;AACD,eAJD,MAIO,IAAIX,IAAIU,MAAJ,KAAe,GAAnB,EAAwB;AAC7B;AACAC,sBAAMX,IAAIc,YAAV;AACAhB,wBAAQa,GAAR;AACD,eAJM,MAIA;AACLZ,uBAAO,KAAKgB,UAAZ;AACD;AACF;AACF;AACF,SAtBM,CAAP;AAuBD,O;;;;0BAEYG,Q,GAAW,SAAXA,QAAW,CAACC,MAAD,EAASC,GAAT,EAAiB;AACvC,eAAOD,OAAOE,KAAP,CAAaD,GAAb,EAAkBE,IAAlB,QAA4BF,GAA5B,CAAP;AACD,O;;;;uBAEYG,K,GAAQ,SAARA,KAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AACzCxC,kBAAUyC,IAAV,CAAe,WAAWH,IAA1B,EAAgC,CAACC,KAAD,EAAQC,GAAR,CAAhC;AACD,O","file":"utils.js","sourcesContent":["import { appEvents } from 'app/core/core'\n\nconst hostname = window.location.hostname\nconst http = \"http://\"\nexport const postgRestHost = http + hostname + ':5436/'\nexport const influxHost = http + hostname + ':8086/'\n\nlet tasklistHostName = hostname\nif (tasklistHostName === 'localhost') {\n  tasklistHostName = '127.0.0.1'\n}\nexport const camundaHost = http + tasklistHostName + ':8080/camunda/app/tasklist'\nexport const camundaRestApi = http + hostname + ':8080/engine-rest/'\n\nexport const get = url => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.open('GET', url)\n    xhr.onreadystatechange = handleResponse\n    xhr.onerror = e => reject(e)\n    xhr.send()\n\n    function handleResponse () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          var res = JSON.parse(xhr.responseText)\n          resolve(res)\n        } else {\n          reject(this.statusText)\n        }\n      }\n    }\n  })\n}\n  \nexport const post = (url, line) => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.open('POST', url)\n    xhr.onreadystatechange = handleResponse\n    xhr.onerror = e => reject(e)\n    xhr.send(line)\n\n    function handleResponse () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          // console.log('200');\n          var res = JSON.parse(xhr.responseText)\n          resolve(res)\n        } else if (xhr.status === 204) {\n          // console.log('204');\n          res = xhr.responseText\n          resolve(res)\n        } else {\n          reject(this.statusText)\n        }\n      }\n    }\n  })\n}\n\nexport const addSlash = (target, key) => {\n  return target.split(key).join(`\\\\${key}`)\n}\n\nexport const alert = (type, title, msg) => {\n  appEvents.emit('alert-' + type, [title, msg])\n}"]}